#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2023 Ciena
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for waveserver5_xcvrs
"""

from __future__ import absolute_import, division, print_function

__metaclass__ = type

ANSIBLE_METADATA = {"metadata_version": "1.1", "status": ["preview"], "supported_by": "network"}

DOCUMENTATION = """
---
module: waveserver5_xcvr
version_added: 1.1.0
short_description: Waveserver Transceiver configuration data and operational data.
description: Waveserver Transceiver configuration data and operational data.
author:
  - Jeff Groom (@jgroom33)
  - Galo Ertola (@perrary)
requirements:
  - ncclient (>=v0.6.4)
  - xmltodict (>=0.12.0)
options:
  config:
    description: Waveserver transceiver (XCVR) list.
    suboptions:
      properties:
        description: All the Configurable and operational data of this XCVR instance.
        suboptions:
          mode:
            description: Mode of the XCVR.
            required: true
            type: cienawstypes:xcvr-mode
        type: dict
      state:
        description: State information of this XCVR instance.
        suboptions:
          admin-state:
            description: Whether Admin State is enabled or disabled for this XCVR's
              PTP.
            required: true
            type: cienawstypes:enabled-disabled-enum
        type: dict
      xcvr_id:
        description: Unique, access identifier string of the XCVR (e.g. '1-1').
          Key value for the XCVR List.
        required: true
        type: cienawstypes:name-string
    type: list
  state:
    choices:
    - gathered
    - merged
    - overridden
    default: merged
    description:
    - The state the configuration should be left in
    type: str
"""
EXAMPLES = """
# Using merged

- name: Configure xcvr
  ciena.waveserver5.waveserver5_xcvr:
    config:
      host-name:
        config-host-name: foo
    state: merged


# Using overridden

- name: Configure Transceiver enable
  ciena.waveserver5.waveserver5_xcvr:
    config:
      host-name:
        config-host-name: foo
    state: overridden


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  type: dict
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  type: dict
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
xml:
  description: The set of xml commands pushed to the remote device.
  returned: always
  type: list
  sample: ['<system xmlns="http://openconfig.net/yang/system"><config><hostname>foo</hostname></config></system>']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.ciena.waveserver5.plugins.module_utils.network.waveserver5.argspec.xcvrs.xcvrs import (
    XcvrsArgs,
)
from ansible_collections.ciena.waveserver5.plugins.module_utils.network.waveserver5.config.xcvrs.xcvrs import (
    Xcvrs,
)


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=XcvrsArgs.argument_spec, supports_check_mode=True)

    result = Xcvrs(module).execute_module()
    module.exit_json(**result)


if __name__ == "__main__":
    main()
